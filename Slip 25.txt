@Slip-25

Q. 1) Write a script to create “cricket.xml” file with multiple elements as shown below:
<CricketTeam>
<Team country=”Australia”>
<player>____</player>
<runs>______</runs>
<wicket>____</wicket>
</Team>
</CricketTeam>
Write a script to add multiple elements in “cricket.xml” file of category, country=”India”. 

Ans:

<?php
// Create a new DOM document
$doc = new DOMDocument();

// Create the root element
$cricketTeam = $doc->createElement(“CricketTeam”);

// Create the first team element for Australia
$teamAustralia = $doc->createElement(“Team”);
$teamAustralia->setAttribute(“country”, “Australia”);

// Create the player element and set its value
$player1 = $doc->createElement(“player”, “Steve Smith”);
$teamAustralia->appendChild($player1);

// Create the runs element and set its value
$runs1 = $doc->createElement(“runs”, “7090”);
$teamAustralia->appendChild($runs1);

// Create the wicket element and set its value
$wicket1 = $doc->createElement(“wicket”, “17”);
$teamAustralia->appendChild($wicket1);

// Append the team element to the root element
$cricketTeam->appendChild($teamAustralia);

// Create the second team element for India
$teamIndia = $doc->createElement(“Team”);
$teamIndia->setAttribute(“country”, “India”);

// Create the player element and set its value
$player2 = $doc->createElement(“player”, “Virat Kohli”);
$teamIndia->appendChild($player2);

// Create the runs element and set its value
$runs2 = $doc->createElement(“runs”, “12169”);
$teamIndia->appendChild($runs2);

// Create the wicket element and set its value
$wicket2 = $doc->createElement(“wicket”, “4”);
$teamIndia->appendChild($wicket2);

// Create the category element and set its value
$category = $doc->createElement(“category”, “Captain”);
$teamIndia->appendChild($category);

// Append the team element to the root element
$cricketTeam->appendChild($teamIndia);

// Append the root element to the document
$doc->appendChild($cricketTeam);

// Save the XML file
$doc->save(“cricket.xml”);

Echo “Elements added successfully!”;
?>



Q. 2) Consider the following dataset : https://www.kaggle.com/datasets/seungguini/youtube-commentsfor-covid19-relatedvideos?select=covid_2021_1.csv 
Write a Python script for the following :
i.
Read the dataset and perform data cleaning operations on it. 
ii.
ii. Tokenize the comments in words. Iii. Perform sentiment analysis and find the percentage of 
positive, negative and neutral comments.. 


Ans:

Import pandas as pd
Import nltk
From nltk.sentiment.vader import SentimentIntensityAnalyzer

# read the dataset
Df = pd.read_csv(‘covid_2021_1.csv’)

# remove null values and duplicates
Df.dropna(inplace=True)
Df.drop_duplicates(subset=’Comment’, inplace=True)

# tokenize comments in words
Nltk.download(‘punkt’)
Df[‘tokens’] = df[‘Comment’].apply(nltk.word_tokenize)

# perform sentiment analysis
Nltk.download(‘vader_lexicon’)
Sia = SentimentIntensityAnalyzer()
Df[‘sentiment’] = df[‘Comment’].apply(lambda x: sia.polarity_scores(x)[‘compound’])

# calculate percentage of positive, negative, and neutral comments
Total_comments = len(df)
Positive_comments = len(df[df[‘sentiment’] > 0])
Negative_comments = len(df[df[‘sentiment’] < 0])
Neutral_comments = len(df[df[‘sentiment’] == 0])
Positive_percentage = (positive_comments / total_comments) * 100
Negative_percentage = (negative_comments / total_comments) * 100
Neutral_percentage = (neutral_comments / total_comments) * 100

# print the results
Print(‘Total Comments:’, total_comments)
Print(‘Positive Comments:’, positive_comments, ‘(‘, positive_percentage, ‘%)’)
Print(‘Negative Comments:’, negative_comments, ‘(‘, negative_percentage, ‘%)’)
Print(‘Neutral Comments:’, neutral_comments, ‘(‘, neutral_percentage, ‘%)’)
